{"uid":"c62d7655cd84036c","name":"test_Segment_Generator[test_case55]","fullName":"tests.SegmentGenerator.MCR_Segment_Prompt_Testing#test_Segment_Generator","historyId":"a04c98a1e1738440402481529743180a","time":{"start":1719714929126,"stop":1719714974631,"duration":45505},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1719712965313,"stop":1719712965465,"duration":152},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"setup_and_teardown","time":{"start":1719712965465,"stop":1719712965465,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"passed","steps":[{"name":"LLM Benchmarking","time":{"start":1719714929127,"stop":1719714974630,"duration":45503},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"test_case","value":"LLMTestCase(input=\"Get me contacts who performed 'allocadia_events' where the 'allocadia_tactic_id' contains '4371904' anytime after '2021-04-27T18:30:00.000Z' and also performed 'allocadia_events' where 'allocadia_asset_id' contains '4390557' or '4084321' or '4545648' anytime after '2021-04-27T18:30:00.000Z'\", actual_output='import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)', expected_output='{\"condition\": \"AND\", \"matchGroups\": [{\"matches\": [{\"type\": \"custom_event\", \"filters\": [{\"value\": \"4371904\", \"fieldId\": \"allocadia_tactic_id\", \"fieldName\": \"allocadia_tactic_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_07\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"AND\"}, {\"type\": \"custom_event\", \"filters\": [{\"value\": \"4390557\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4084321\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4545648\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"OR\"}], \"condition\": \"AND\"}]}', context=None, retrieval_context=['import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)'], additional_metadata=None, comments=None)"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[{"uid":"3d2594d137836cd4","name":"stdout","source":"3d2594d137836cd4.txt","type":"text/plain","size":21378}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"setup_and_teardown::0","time":{"start":1719716068785,"stop":1719716068786,"duration":1},"status":"passed","steps":[{"name":"Finding Mean Context Recall and Answer Relevance","time":{"start":1719716068785,"stop":1719716068786,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"fa22fdaa7ef60082","name":"cd86003e-5e1f-4b19-83f8-8b0cc5c7c017-attachment.txt","source":"fa22fdaa7ef60082.txt","type":"text/plain","size":39},{"uid":"4a2361da5aaea90f","name":"e18e995f-19c2-414b-8a45-873540173532-attachment.txt","source":"4a2361da5aaea90f.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"attachmentStep":false,"hasContent":true}],"labels":[{"name":"parentSuite","value":"tests.SegmentGenerator"},{"name":"suite","value":"MCR_Segment_Prompt_Testing"},{"name":"host","value":"FWS-CHE-LT-6357"},{"name":"thread","value":"52850-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.SegmentGenerator.MCR_Segment_Prompt_Testing"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"LLMTestCase(input=\"Get me contacts who performed 'allocadia_events' where the 'allocadia_tactic_id' contains '4371904' anytime after '2021-04-27T18:30:00.000Z' and also performed 'allocadia_events' where 'allocadia_asset_id' contains '4390557' or '4084321' or '4545648' anytime after '2021-04-27T18:30:00.000Z'\", actual_output='import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)', expected_output='{\"condition\": \"AND\", \"matchGroups\": [{\"matches\": [{\"type\": \"custom_event\", \"filters\": [{\"value\": \"4371904\", \"fieldId\": \"allocadia_tactic_id\", \"fieldName\": \"allocadia_tactic_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_07\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"AND\"}, {\"type\": \"custom_event\", \"filters\": [{\"value\": \"4390557\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4084321\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4545648\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"OR\"}], \"condition\": \"AND\"}]}', context=None, retrieval_context=['import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)'], additional_metadata=None, comments=None)"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"c62d7655cd84036c.json","parameterValues":["LLMTestCase(input=\"Get me contacts who performed 'allocadia_events' where the 'allocadia_tactic_id' contains '4371904' anytime after '2021-04-27T18:30:00.000Z' and also performed 'allocadia_events' where 'allocadia_asset_id' contains '4390557' or '4084321' or '4545648' anytime after '2021-04-27T18:30:00.000Z'\", actual_output='import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)', expected_output='{\"condition\": \"AND\", \"matchGroups\": [{\"matches\": [{\"type\": \"custom_event\", \"filters\": [{\"value\": \"4371904\", \"fieldId\": \"allocadia_tactic_id\", \"fieldName\": \"allocadia_tactic_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_07\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"AND\"}, {\"type\": \"custom_event\", \"filters\": [{\"value\": \"4390557\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4084321\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}, {\"value\": \"4545648\", \"fieldId\": \"allocadia_asset_id\", \"fieldName\": \"allocadia_asset_id\", \"fieldType\": \"string\", \"columnName\": \"ef_string_06\", \"comparator\": \"contains\"}], \"criteria\": {\"eventName\": \"allocadia_events\", \"operation\": \"performed\", \"dateCondition\": {\"value\": \"2021-04-27T18:30:00.000Z\", \"operator\": \"anytime\", \"timezone\": -330}}, \"condition\": \"OR\"}], \"condition\": \"AND\"}]}', context=None, retrieval_context=['import json\\nfrom typing import List, Any\\nfrom enum import Enum\\n\\nclass Condition(Enum):\\n    AND = \"AND\"\\n    OR = \"OR\"\\n\\nclass MatchType(Enum):\\n    SM_LEADGEN_EVENT = \"SM_LEADGEN_EVENT\"\\n    CHAT_ACTIVITY = \"CHAT_ACTIVITY\"\\n    contact_field = \"contact_field\"\\n    list_membership = \"list_membership\"\\n    journey_event = \"journey_event\"\\n    email_event = \"email_event\"\\n    form_event = \"form_event\"\\n    page_visit_event = \"page_visit_event\"\\n    custom_event = \"custom_event\"\\n    whatsapp_event = \"whatsapp_event\"\\n    sms_event = \"sms_event\"\\n    landing_page_event = \"landing_page_event\"\\n    shopify_event = \"shopify_event\"\\n    company_field = \"company_field\"\\n    CUSTOMER_ACTIVITY = \"CUSTOMER_ACTIVITY\"\\n    woocommerce_event = \"woocommerce_event\"\\n\\nclass Comparator(Enum):\\n    FIRST_OCCURRENCE = \"FIRST_OCCURRENCE\"\\n    LAST_OCCURRENCE = \"LAST_OCCURRENCE\"\\n    eq = \"eq\"\\n    neq = \"neq\"\\n    contains = \"contains\"\\n    does_not_contain = \"does_not_contain\"\\n    starts_with = \"starts_with\"\\n    ends_with = \"ends_with\"\\n    lesser_than = \"lesser_than\"\\n    greater_than = \"greater_than\"\\n    lesser_than_or_equals = \"lesser_than_or_equals\"\\n    greater_than_or_equals = \"greater_than_or_equals\"\\n    before = \"before\"\\n    after = \"after\"\\n    anytime = \"anytime\"\\n    is_empty = \"is_empty\"\\n    is_not_empty = \"is_not_empty\"\\n    on = \"on\"\\n    between = \"between\"\\n    before_nth_day = \"before_nth_day\"\\n    last_n_days = \"last_n_days\"\\n    last_n_days_including_today = \"last_n_days_including_today\"\\n    next_n_days = \"next_n_days\"\\n    next_n_days_including_today = \"next_n_days_including_today\"\\n    yesterday = \"yesterday\"\\n    today = \"today\"\\n    tomorrow = \"tomorrow\"\\n    last_week = \"last_week\"\\n    this_week = \"this_week\"\\n    next_week = \"next_week\"\\n    last_month = \"last_month\"\\n    this_month = \"this_month\"\\n    next_month = \"next_month\"\\n    _in = \"in\"\\n    not_in = \"not_in\"\\n\\nclass SegmentConfiguration:\\n    condition: Condition\\n    matchGroups: List[\\'MatchGroup\\']\\n\\nclass MatchGroup:\\n    condition: Condition\\n    matches: List[\\'Match\\']\\n\\nclass Match:\\n    type: MatchType\\n    condition: Condition\\n    criteria: ChatEventCriteria | CompanyFieldCriteria | ContactFieldCriteria | CustomEventCriteria | D2CEventCriteria | EmailEventCriteria | FormEventCriteria | JourneyEventCriteria | LandingPageEventCriteria | LeadGenEventCriteria | ListMembershipCriteria | PageVisitEventCriteria | SmsEventCriteria | TraitCriteria | WhatsappEventCriteria | ShopifyEventCriteria\\n\\nclass Filter:\\n    fieldName: str\\n    fieldId: str\\n    fieldType: str\\n    columnName: str\\n    value: object\\n    secondValue: object\\n    relativeDateCount: str\\n    comparator: Comparator\\n\\n# The rest of the classes and enums have been omitted for brevity\\n\\n# Build the segment configuration matching the given criteria\\nsegment_config = SegmentConfiguration(\\n    condition=Condition.AND,\\n    matchGroups=[\\n        MatchGroup(\\n            condition=Condition.AND,\\n            matches=[\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                ),\\n                Match(\\n                    type=MatchType.CustomEventCriteria,\\n                    condition=Condition.AND,\\n                    criteria=CustomEventCriteria(\\n                        eventName=\"allocadia_events\",\\n                        dateCondition=DateCondition(\\n                            operator=DateCondition.DateOperator.after,\\n                            timezone=-330,\\n                            value=\"2021-04-27T18:30:00.000Z\"\\n                        ),\\n                        operation=CustomEventCriteria.CustomEventOperation.performed,\\n                        occurenceCondition=OccurrenceFilterCondition(\\n                            name=OccurrenceFilterCondition.OccurrenceFilterType.count,\\n                            type=OccurrenceFilterCondition.OccurenceFieldType.number,\\n                            operator=Comparator.anytime,\\n                            value=\"1\",\\n                            dateCondition=DateCondition(\\n                                operator=DateCondition.DateOperator.anytime,\\n                                timezone=-330,\\n                                value=\"2024-06-18T13:09:00.108Z\"\\n                            )\\n                        )\\n                    )\\n                )\\n            ]\\n        )\\n    ]\\n)\\n\\n# Convert the segment configuration to JSON\\njson_segment_config = json.dumps(segment_config, default=lambda o: o.__dict__, indent=2)\\nprint(json_segment_config)'], additional_metadata=None, comments=None)"]}